context('Cypress.Commands', () => {
    beforeEach(() => {
      cy.visit('https://example.cypress.io/cypress-api')
    })
  
    // https://on.cypress.io/custom-commands
  
    it('.add() - create a custom command', () => {
      Cypress.Commands.add('console', {
        prevSubject: true,
      }, (subject, method) => {
        // the previous subject is automatically received
        // and the commands arguments are shifted
  
        // allow us to change the console method used
        method = method || 'log'
  
        // log the subject to the console
        // @ts-ignore TS7017
        console[method]('The subject is', subject)
  
        // whatever we return becomes the new subject
        // we don't want to change the subject so
        // we return whatever was passed in
        return subject
      })
  
      // @ts-ignore TS2339
      cy.get('button').console('info').then(($button) => {
        // subject is still $button
      })
    })
  })
  
context('Cypress.Cookies', () => {
    beforeEach(() => {
      cy.visit('https://example.cypress.io/cypress-api')
    })
  
    // https://on.cypress.io/cookies
    it('.debug() - enable or disable debugging', () => {
      Cypress.Cookies.debug(true)
  
      // Cypress will now log in the console when
      // cookies are set or cleared
      cy.setCookie('fakeCookie', '123ABC')
      cy.clearCookie('fakeCookie')
      cy.setCookie('fakeCookie', '123ABC')
      cy.clearCookie('fakeCookie')
      cy.setCookie('fakeCookie', '123ABC')
    })
  
    it('.preserveOnce() - preserve cookies by key', () => {
      // normally cookies are reset after each test
      cy.getCookie('fakeCookie').should('not.be.ok')
  
      // preserving a cookie will not clear it when
      // the next test starts
      cy.setCookie('lastCookie', '789XYZ')
      Cypress.Cookies.preserveOnce('lastCookie')
    })

    context('Cypress.config()', () => {
        beforeEach(() => {
          cy.visit('https://example.cypress.io/cypress-api')
        })
      
        it('Get and set configuration options', () => {
          // https://on.cypress.io/config
          let myConfig = Cypress.config()
      
          expect(myConfig).to.have.property('animationDistanceThreshold', 5)
          expect(myConfig).to.have.property('baseUrl', null)
          expect(myConfig).to.have.property('defaultCommandTimeout', 4000)
          expect(myConfig).to.have.property('requestTimeout', 5000)
          expect(myConfig).to.have.property('responseTimeout', 30000)
          expect(myConfig).to.have.property('viewportHeight', 660)
          expect(myConfig).to.have.property('viewportWidth', 1000)
          expect(myConfig).to.have.property('pageLoadTimeout', 60000)
          expect(myConfig).to.have.property('waitForAnimations', true)
      
          expect(Cypress.config('pageLoadTimeout')).to.eq(60000)
      
          // this will change the config for the rest of your tests!
          Cypress.config('pageLoadTimeout', 20000)
      
          expect(Cypress.config('pageLoadTimeout')).to.eq(20000)
      
          Cypress.config('pageLoadTimeout', 60000)
        })
      })